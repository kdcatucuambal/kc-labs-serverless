openapi: 3.0.1
info:
  description: |
    This is a sample api labs using Java
  version: 0.0.1
servers:
- url: /
paths:
  /labs/balances/{id}:
    get:
      summary: Return a balance by id
      description: Return a balance by id
      operationId: LabsBalancesGETById
      parameters:
      - name: x-request-id
        in: header
        description: The request ID
        required: true
        schema:
          type: string
      - name: x-ip-address
        in: header
        description: The IP address
        required: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: The authorization token
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: Id of balance to return
        required: true
        style: simple
        explode: false
        schema:
          type: number
          format: int32
          default: 1
      responses:
        200:
          description: OK
          headers:
            Access-Control-Allow-Methods:
              style: simple
              explode: false
              schema:
                type: string
            Access-Control-Allow-Origin:
              style: simple
              explode: false
              schema:
                type: string
            Access-Control-Allow-Headers:
              style: simple
              explode: false
              schema:
                type: string
            x-jws-signature:
              $ref: '#/components/headers/x-jws-signature'
            Content-Language:
              $ref: '#/components/headers/Content-Language'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Balance'
        400:
          description: Bad request
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Not found
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: Conflict
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many requests
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - api_key: []
      - authorizer: []
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: aws
        timeoutInMillis: 20000
        uri:
          Fn::Join:
          - ""
          - - Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LabsBalancesGETByIdLambda.Arn}:'
            - ${stageVariables.version_alias}/invocations
        passThroughBehavior: when_no_templates
        requestTemplates:
          application/json: |-
            {
              "header": {
                "aws_request_id": "$context.requestId",
                "x_authorization": "$input.params().header.get('Authorization')",
                "x_request_id": "$input.params().header.get('x-request-id')",
                "x_ip_address": "$input.params().header.get('x-ip-address')"
              },
              "body" : $input.json('$'),
              "getbody": {
                "queries":{
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))"#if($foreach.hasNext),#end
                  #end
                },
                "params": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))"#if($foreach.hasNext),#end
                  #end
                }
              },
              "service": {
                "apiId": "$context.apiId",
                "operationId": "LabsBalancesGetById"
              }
            }
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-request-id'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                $input.json('$.body')
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                {"message": "El mensaje de solicitud no se encuentra debidamente formateado."}
          401:
            statusCode: 401
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                {"message": "No se encuentra autorizado para realizar la operaci√≥n."}
          403:
            statusCode: 403
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                {"message": "La solicitud ha sido rechazada."}
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                {"message": "El objeto no fue encontrado."}
          409:
            statusCode: 409
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                {"message": "La operaci√≥n present√≥ un error durante la ejecuci√≥n. :)"}
          429:
            statusCode: 429
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                {"message": "Se ha excedido el n√∫mero de solicitudes permitidas."}
          500|.*timed.*:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                #set($cause = $input.path('$.cause'))
                 $cause.errorMessage
    options:
      summary: Balances Get By Id Options
      description: Balances Get By Id Options
      operationId: LabsBalancesGETByIdOPT
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Methods:
              style: simple
              explode: false
              schema:
                type: string
            Access-Control-Allow-Headers:
              style: simple
              explode: false
              schema:
                type: string
            Access-Control-Allow-Origin:
              style: simple
              explode: false
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-request-id'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
  /labs/balances:
    get:
      summary: Returns all balances
      description: Returns all balances from database
      operationId: LabsBalancesGETAll
      parameters:
      - name: x-request-id
        in: header
        description: The request ID
        required: true
        schema:
          type: string
      - name: x-ip-address
        in: header
        description: The IP address
        required: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: The authorization token
        required: true
        schema:
          type: string
      - name: page
        in: query
        description: Page number
        required: false
        style: form
        explode: true
        schema:
          type: number
          format: int32
          default: 1
      - name: code
        in: query
        description: Code
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            Access-Control-Allow-Methods:
              style: simple
              explode: false
              schema:
                type: string
            Access-Control-Allow-Origin:
              style: simple
              explode: false
              schema:
                type: string
            Access-Control-Allow-Headers:
              style: simple
              explode: false
              schema:
                type: string
            x-jws-signature:
              $ref: '#/components/headers/x-jws-signature'
            Content-Language:
              $ref: '#/components/headers/Content-Language'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllBalancesRs'
        400:
          description: Bad request
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Not found
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: Conflict
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many requests
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - api_key: []
      - authorizer: []
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: aws
        timeoutInMillis: 20000
        uri:
          Fn::Join:
          - ""
          - - Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LabsBalancesGETAllLambda.Arn}:'
            - ${stageVariables.version_alias}/invocations
        passThroughBehavior: when_no_templates
        requestTemplates:
          application/json: |-
            {
              "header": {
                "aws_request_id": "$context.requestId",
                "x_authorization": "$input.params().header.get('Authorization')",
                "x_request_id": "$input.params().header.get('x-request-id')",
                "x_ip_address": "$input.params().header.get('x-ip-address')"
              },
              "body" : $input.json('$'),
              "getbody": {
                "queries":{
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))"#if($foreach.hasNext),#end
                  #end
                },
                "params": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))"#if($foreach.hasNext),#end
                  #end
                }
              },
              "service": {
                "apiId": "$context.apiId",
                "operationId": "LabsBalancesGETAll"
              }
            }
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                $input.json('$.body')
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                {"message": "El mensaje de solicitud no se encuentra debidamente formateado."}
          401:
            statusCode: 401
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                {"message": "No se encuentra autorizado para realizar la operaci√≥n."}
          403:
            statusCode: 403
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                {"message": "La solicitud ha sido rechazada."}
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                {"message": "El objeto no fue encontrado."}
          409:
            statusCode: 409
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                {"message": "La operaci√≥n present√≥ un error durante la ejecuci√≥n. :)"}
          429:
            statusCode: 429
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                {"message": "Se ha excedido el n√∫mero de solicitudes permitidas."}
          500|.*timed.*:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                #set($cause = $input.path('$.cause'))
                 $cause.errorMessage
    post:
      summary: Create a new balance
      description: Create a new balance
      operationId: LabsBalancesPST
      parameters:
      - name: x-request-id
        in: header
        description: The request ID
        required: true
        schema:
          type: string
      - name: x-ip-address
        in: header
        description: The IP address
        required: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: The authorization token
        required: true
        schema:
          type: string
      requestBody:
        description: Balance object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Balance'
        required: true
      responses:
        201:
          description: OK
          headers:
            Access-Control-Allow-Methods:
              style: simple
              explode: false
              schema:
                type: string
            Access-Control-Allow-Origin:
              style: simple
              explode: false
              schema:
                type: string
            Access-Control-Allow-Headers:
              style: simple
              explode: false
              schema:
                type: string
            x-jws-signature:
              $ref: '#/components/headers/x-jws-signature'
            Content-Language:
              $ref: '#/components/headers/Content-Language'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Balance'
        400:
          description: Bad request
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Not found
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: Conflict
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many requests
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - api_key: []
      - authorizer: []
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: aws
        timeoutInMillis: 20000
        uri:
          Fn::Join:
          - ""
          - - Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LabsBalancesPSTLambda.Arn}:'
            - ${stageVariables.version_alias}/invocations
        passThroughBehavior: when_no_templates
        requestTemplates:
          application/json: |-
            {
              "header": {
                "aws_request_id": "$context.requestId",
                "x_authorization": "$input.params().header.get('Authorization')",
                "x_request_id": "$input.params().header.get('x-request-id')",
                "x_ip_address": "$input.params().header.get('x-ip-address')"
              },
              "body" : $input.json('$'),
              "getbody": {
                "queries":{
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))"#if($foreach.hasNext),#end
                  #end
                },
                "params": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))"#if($foreach.hasNext),#end
                  #end
                }
              },
              "service": {
                "apiId": "$context.apiId",
                "operationId": "LabsBalancesPST"
              }
            }
        responses:
          default:
            statusCode: 201
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                $input.json('$.body')
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                {"message": "El mensaje de solicitud no se encuentra debidamente formateado."}
          401:
            statusCode: 401
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                {"message": "No se encuentra autorizado para realizar la operaci√≥n."}
          403:
            statusCode: 403
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                {"message": "La solicitud ha sido rechazada."}
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                {"message": "El objeto no fue encontrado."}
          409:
            statusCode: 409
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                {"message": "La operaci√≥n present√≥ un error durante la ejecuci√≥n. :)"}
          429:
            statusCode: 429
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($res = $input.path('$'))
                {"message": "Se ha excedido el n√∫mero de solicitudes permitidas."}
          500|.*timed.*:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: "#set($res = $input.path('$'))\n#set($cause = $input.path('$.cause'))\n\
                \ $cause.errorMessage      "
    options:
      summary: Balances OPT
      description: Balances OPT
      operationId: BalancesOPT
      responses:
        200:
          description: Success
          headers:
            Access-Control-Allow-Headers:
              style: simple
              explode: false
              schema:
                type: string
            Access-Control-Allow-Methods:
              style: simple
              explode: false
              schema:
                type: string
            Access-Control-Allow-Origin:
              style: simple
              explode: false
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
components:
  schemas:
    GetAllBalancesRs:
      type: array
      items:
        $ref: '#/components/schemas/Balance'
    Balance:
      type: object
      properties:
        id:
          type: number
          description: The id
        code:
          type: string
          description: The code
        user:
          type: string
          description: The user
        average:
          type: number
          description: The average
        current:
          type: number
          description: The current
        active:
          type: boolean
          description: The active
        cuttofDate:
          type: string
          description: The cuttofDate
          format: date
      description: The balance object
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: The error message
  headers:
    x-jws-signature:
      description: The JWS signature
      schema:
        type: string
    Content-Language:
      description: The content language
      schema:
        type: string
  securitySchemes:
    api_key:
      type: apiKey
      description: API key or aborts with Unauthorized
      name: x-api-key
      in: header
    authorizer:
      type: apiKey
      description: Token JWT para el consumo del API.
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: custom
      x-amazon-apigateway-authorizer:
        type: token
        identitySource: v1
        authorizerUri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaAuthorizer}:production/invocations
        authorizerResultTtlInSeconds: 3000
        identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
  params-only:
    validateRequestBody: false
    validateRequestParameters: true
