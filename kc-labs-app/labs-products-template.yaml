AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM template for kc-labs-serverless, lambdas for products

Parameters:
  EnvironmentId:
    Type: String
    Description: Environment ID

  LambdaAliasProduction:
    Type: String
    Description: Lambda Alias for Production

  LambdaAliasBeta:
    Type: String
    Description: Environment alias

  LogRetentionInDays:
    Type: String
    Description: Log retention in days

  LambdaAuthorizer:
    Type: String
    Description: Lambda Authorizer

  LabsRoleArn:
    Type: String
    Description: Role ARN

  LabsLayer:
    Type: String
    Description: Layer for lambdas

  ProvisionedConcurrencyConfigEnabled:
    Type: String
    Description: Enable Provisioned Concurrency Config

  ApiGatewayResponseMessage400:
    Type: String
    Description: message error 400

  ApiGatewayResponseMessage401:
    Type: String
    Description: message error 401

  ApiGatewayResponseMessage403:
    Type: String
    Description: message error 403

  ApiGatewayResponseMessage404:
    Type: String
    Description: message error 404

  ApiGatewayResponseMessage405:
    Type: String
    Description: message error 405

  ApiGatewayResponseMessage409:
    Type: String
    Description: message error 409

  ApiGatewayResponseMessage429:
    Type: String
    Description: message error 429

  ApiGatewayResponseMessage500:
    Type: String
    Description: message error 500


Conditions:
  LambdaProvisioned: !Equals [!Ref ProvisionedConcurrencyConfigEnabled, "true"]

Globals:
  Function:
    CodeUri: target/original-kc-labs-app-1.0.jar
    Timeout: 20
    Tracing: Active
    Runtime: java11
    MemorySize: 512
    Architectures:
      - x86_64
    Environment:
      Variables:
        message: "Hello from Lambda"
        PRODUCTS_TABLE: "dev1-labs-products"

  Api:
    OpenApiVersion: 3.0.1
    TracingEnabled: True
    GatewayResponses:
      DEFAULT_4XX:
        StatusCode: "400"
        ResponseParameters:
          Headers:
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
            gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        ResponseTemplates:
          application/json: !Sub '{"message": "${ApiGatewayResponseMessage400}"}'
      BAD_REQUEST_PARAMETERS:
        StatusCode: "400"
        ResponseParameters:
          Headers:
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
            gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        ResponseTemplates:
          application/json: '{"message": "The parameters is not properly formatted."}'
      BAD_REQUEST_BODY:
        StatusCode: "400"
        ResponseParameters:
          Headers:
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
            gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        ResponseTemplates:
          application/json: '{"message": "The body is not properly formatted."}'
      ACCESS_DENIED:
        StatusCode: "403"
        ResponseParameters:
          Headers:
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
            gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        ResponseTemplates:
          application/json: !Sub '{"message": "${ApiGatewayResponseMessage403}"}'

      DEFAULT_5XX:
        ResponseParameters:
          Headers:
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
            gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        ResponseTemplates:
          application/json: !Sub '{"message": "${ApiGatewayResponseMessage500}"}'

Resources:
  LabsApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt LabsApiGatewayLogGroup.Arn
      StageName: v1
      Variables:
        version_alias: !Ref LambdaAliasProduction
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ../specs/labs_products_api.yaml
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          MetricsEnabled: "true"
          DataTraceEnabled: "false"
          LoggingLevel: "INFO"

  LabsDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref LabsApiGateway

  LabsApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "API-Gateway-Execution-Logs_${LabsApiGateway}/v1"
      RetentionInDays: !Ref LogRetentionInDays

  LabsProductsGETByIdLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.kc.cloud.labs.aws.lambda.products.LabsProductsGETById::handleRequest
      FunctionName: !Sub "${EnvironmentId}-LabsProductsGETByIdLambda"
      Layers:
        - !Ref LabsLayer
      Role: !Ref LabsRoleArn
      AutoPublishAlias: !Ref LambdaAliasBeta
      Environment:
        Variables:
          PARAM1: VALUE
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        EventApi:
          Type: Api
          Properties:
            Path: /labs/products/{id}
            Method: get
            RestApiId: !Ref LabsApiGateway

  LabsProductsGETByIdAliasProduction:
    Type: AWS::Lambda::Alias
    Properties:
      Description: "Lambda alias for production"
      FunctionName: !Ref LabsProductsGETByIdLambda
      FunctionVersion: !Select [ 7, !Split [ ":", !Ref LabsProductsGETByIdLambda.Version ] ]
      Name: !Ref LambdaAliasProduction
      ProvisionedConcurrencyConfig:
        !If
        - LambdaProvisioned
        - ProvisionedConcurrentExecutions: 2
        - Ref: AWS::NoValue

  LabsProductsGETByIdLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LabsProductsGETByIdLambda}"
      RetentionInDays: !Ref LogRetentionInDays

  LabsProductsGETByIdProductionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub "${LabsProductsGETByIdLambda}:${LambdaAliasProduction}"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${LabsApiGateway}*/*/*"

  LabsProductsGETAllLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.kc.cloud.labs.aws.lambda.products.LabsProductsGETAll::handleRequest
      FunctionName: !Sub "${EnvironmentId}-LabsProductsGETAllLambda"
      Layers:
        - !Ref LabsLayer
      Role: !Ref LabsRoleArn
      AutoPublishAlias: !Ref LambdaAliasBeta
      Environment:
        Variables:
          PARAM1: VALUE
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        EventApi:
          Type: Api
          Properties:
            Path: /labs/products
            Method: get
            RestApiId: !Ref LabsApiGateway

  LabsProductsGETAllAliasProduction:
    Type: AWS::Lambda::Alias
    Properties:
      Description: "Lambda alias for production"
      FunctionName: !Ref LabsProductsGETAllLambda
      FunctionVersion: !Select [ 7, !Split [ ":", !Ref LabsProductsGETAllLambda.Version ] ]
      Name: !Ref LambdaAliasProduction
      ProvisionedConcurrencyConfig:
        !If
        - LambdaProvisioned
        - ProvisionedConcurrentExecutions: 2
        - Ref: AWS::NoValue

  LabsProductsGETAllLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LabsProductsGETAllLambda}"
      RetentionInDays: !Ref LogRetentionInDays

  LabsProductsGETAllProductionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub "${LabsProductsGETAllLambda}:${LambdaAliasProduction}"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${LabsApiGateway}*/*/*"


Outputs:
  ApiId:
    Description: API Gateway ID
    Value: !Ref LabsApiGateway

  ApiStage:
    Description: API Gateway Stage
    Value: "v1"

