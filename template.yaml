AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  kc-labs-serverless

  Sample SAM Template for kc-labs-serverless

Parameters:
  EnvironmentId:
    Type: String
    Description: Environment ID
    Default: kec

  LambdaAliasProduction:
    Type: String
    Description: Lambda Alias for Production
    Default: production

  LambdaAliasBeta:
    Type: String
    Description: Environment alias
    Default: beta

  LogRetentionInDays:
    Type: Number
    Description: Log retention in days
    Default: 5

  LambdaAuthorizer:
    Type: String
    Description: Lambda Authorizer
    Default: kec-authorizer-lambda
  
  ProvisionedConcurrencyConfigEnabled:
    Type: String
    Description: Enable Provisioned Concurrency Config
    Default: "false"

  ApiGatewayResponseMessage400:
    Type: String
    Default: The message is not properly formatted.
    Description: message error 400
  ApiGatewayResponseMessage401:
    Type: String
    Default: You are not authorized to access this resource.
    Description: message error 401
  ApiGatewayResponseMessage403:
    Type: String
    Default: The request has been denied.
    Description: message error 403
  ApiGatewayResponseMessage404:
    Type: String
    Default: The object not found.
    Description: message error 404
  ApiGatewayResponseMessage405:
    Type: String
    Default: "The method is not allowed"
    Description: message error 405
  ApiGatewayResponseMessage409:
    Type: String
    Default: The request had a conflict.
    Description: message error 409
  ApiGatewayResponseMessage429:
    Type: String
    Default: Too many requests have been made.
    Description: message error 429
  ApiGatewayResponseMessage500:
    Type: String
    Default: An error occurred during the request.
    Description: message error 500

Conditions:
  LambdaProvisioned: !Equals [!Ref ProvisionedConcurrencyConfigEnabled, "true"]


Globals:
  Function:
    CodeUri: kc-labs-app/target/original-kc-labs-app-1.0.jar
    Timeout: 20
    Tracing: Active
    Runtime: java11
    MemorySize: 512
    Architectures:
      - x86_64
    Environment:
      Variables:
        message: "Hello from Lambda"
  Api:
    OpenApiVersion: 3.0.1
    TracingEnabled: True
    GatewayResponses:
      DEFAULT_4XX:
        StatusCode: "400"
        ResponseParameters:
          Headers:
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
            gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        ResponseTemplates:
          application/json: !Sub '{"message": "${ApiGatewayResponseMessage400}"}'
      BAD_REQUEST_PARAMETERS:
        StatusCode: "400"
        ResponseParameters:
          Headers:
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
            gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        ResponseTemplates:
          application/json: '{"message": "The parameters is not properly formatted."}'
      BAD_REQUEST_BODY:
        StatusCode: "400"
        ResponseParameters:
          Headers:
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
            gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        ResponseTemplates:
          application/json: '{"message": "The body is not properly formatted."}'
      ACCESS_DENIED:
        StatusCode: "403"
        ResponseParameters:
          Headers:
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
            gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        ResponseTemplates:
          application/json: !Sub '{"message": "${ApiGatewayResponseMessage403}"}'

      DEFAULT_5XX:
        ResponseParameters:
          Headers:
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
            gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        ResponseTemplates:
          application/json: !Sub '{"message": "${ApiGatewayResponseMessage500}"}'
    

Resources:
  LabsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Join
        - ""
        - - !Ref EnvironmentId
          - labs-layer
      Description: Layer libs for kc-labs-serverless
      ContentUri: kc-labs-app/dependencies
      CompatibleRuntimes:
        - java11
        - java8
      CompatibleArchitectures:
        - x86_64
      LicenseInfo: "MIT"
      RetentionPolicy: Retain

  ApiGatewayApi:
    DependsOn:
      - ApiCWLRoleArnAccount
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt LabsApiGatewayLogGroup.Arn
      StageName: v1
      Variables:
        version_alias: !Ref LambdaAliasProduction
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./specs/labs_api.yaml
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          MetricsEnabled: "true"
          DataTraceEnabled: "false"
          LoggingLevel: "INFO"

  LabsDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGatewayApi

  LabsApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "API-Gateway-Execution-Logs_${ApiGatewayApi}/v1"
      RetentionInDays: !Ref LogRetentionInDays


  ApiCWLRoleArnAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt IAMRoleCoreApiGatewayCloudWatch.Arn

  IAMRoleCoreApiGatewayCloudWatch:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', [!Ref EnvironmentId , "ApiGateway-Log-role"]]
      Description: !Join ['-', [!Ref EnvironmentId , "ApiGateway-Log-role"]]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 
              - apigateway.amazonaws.com
          Action: 'sts:AssumeRole'
      Path : "/"
      Policies:
      - PolicyName: !Join ['-', [!Ref EnvironmentId , "default"]]
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 's3:GetObject'
            Resource: "arn:aws:s3:::*/*"
          - Effect: Allow
            Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:DescribeLogGroups'
            - 'logs:DescribeLogStreams'
            - 'logs:FilterLogEvents'
            Resource: 
            - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*'
          - Effect: Allow
            Action:
            - 'logs:PutLogEvents'
            - 'logs:GetLogEvents'
            Resource: 
            - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*'



  LabsGreetingsGETHelloLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.kc.cloud.labs.aws.lambda.greetings.LabsGreetingsGETHello::handleRequest
      FunctionName: !Sub "${EnvironmentId}-LabsGreetingsGETHelloLambda"
      Layers:
        - !Ref LabsLayer
      Environment:
        Variables:
          PARAM1: VALUE
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        EventApi:
          Type: Api
          Properties:
            Path: /labs/greetings/hello
            Method: get
            RestApiId: !Ref ApiGatewayApi

  LabsGreetingGETNameLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.kc.cloud.labs.aws.lambda.greetings.LabsGreetingGETName::handleRequest
      FunctionName: !Sub "${EnvironmentId}-LabsGreetingGETNameLambda"
      Layers:
        - !Ref LabsLayer
      Environment:
        Variables:
          PARAM1: VALUE
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        EventApi:
          Type: Api
          Properties:
            Path: /labs/greetings/name/{value}
            Method: get
            RestApiId: !Ref ApiGatewayApi

  LabsBalancesGETByIdLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.kc.cloud.labs.aws.lambda.balances.LabsBalancesGETById::handleRequest
      FunctionName: !Sub "${EnvironmentId}-LabsBalancesGETByIdLambda"
      Layers:
        - !Ref LabsLayer
      Role: !GetAtt LabsRole.Arn
      AutoPublishAlias: !Ref LambdaAliasBeta
      Environment:
        Variables:
          PARAM1: VALUE
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        EventApi:
          Type: Api
          Properties:
            Path: /labs/balances/{id}
            Method: get
            RestApiId: !Ref ApiGatewayApi
  
  LabsBalancesGETByIdAliasProduction:
    Type: AWS::Lambda::Alias
    Properties:
      Description: "Lambda alias for production"
      FunctionName: !Ref LabsBalancesGETByIdLambda
      FunctionVersion: !Select [ 7, !Split [ ":", !Ref LabsBalancesGETByIdLambda.Version ] ]
      Name: !Ref LambdaAliasProduction
      ProvisionedConcurrencyConfig:
        !If
          - LambdaProvisioned
          - ProvisionedConcurrentExecutions: 2
          - Ref: AWS::NoValue
  
  LabsBalancesGETByIdLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LabsBalancesGETByIdLambda}"
      RetentionInDays: !Ref LogRetentionInDays

  LabsBalancesGETByIdProductionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub "${LabsBalancesGETByIdLambda}:${LambdaAliasProduction}"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayApi}*/*/*"

  LabsBalancesGETAllLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.kc.cloud.labs.aws.lambda.balances.LabsBalancesGETAll::handleRequest
      FunctionName: !Sub "${EnvironmentId}-LabsBalancesGETAllLambda"
      Layers:
        - !Ref LabsLayer
      Role: !GetAtt LabsRole.Arn
      AutoPublishAlias: !Ref LambdaAliasBeta
      Environment:
        Variables:
          PARAM1: VALUE
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        EventApi:
          Type: Api
          Properties:
            Path: /labs/balances
            Method: get
            RestApiId: !Ref ApiGatewayApi

  LabsBalancesGETAllAliasProduction:
    Type: AWS::Lambda::Alias
    Properties:
      Description: "Lambda alias for production"
      FunctionName: !Ref LabsBalancesGETAllLambda
      FunctionVersion: !Select [ 7, !Split [ ":", !Ref LabsBalancesGETAllLambda.Version ] ]
      Name: !Ref LambdaAliasProduction
      ProvisionedConcurrencyConfig:
        !If
          - LambdaProvisioned
          - ProvisionedConcurrentExecutions: 2
          - Ref: AWS::NoValue

  LabsBalancesGETAllLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LabsBalancesGETAllLambda}"
      RetentionInDays: !Ref LogRetentionInDays

  LabsBalancesGETAllProductionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub "${LabsBalancesGETAllLambda}:${LambdaAliasProduction}"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayApi}*/*/*"


  LabsBalancesPSTLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.kc.cloud.labs.aws.lambda.balances.LabsBalancesPST::handleRequest
      FunctionName: !Sub "${EnvironmentId}-LabsBalancesPSTLambda"
      Layers:
        - !Ref LabsLayer
      Role: !GetAtt LabsRole.Arn
      AutoPublishAlias: !Ref LambdaAliasBeta
      Environment:
        Variables:
          PARAM1: VALUE
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        EventApi:
          Type: Api
          Properties:
            Path: /labs/balances
            Method: post
            RestApiId: !Ref ApiGatewayApi

  LabsBalancesPSTAliasProduction:
    Type: AWS::Lambda::Alias
    Properties:
      Description: "Lambda alias for production"
      FunctionName: !Ref LabsBalancesPSTLambda
      FunctionVersion: !Select [ 7, !Split [ ":", !Ref LabsBalancesPSTLambda.Version ] ]
      Name: !Ref LambdaAliasProduction
      ProvisionedConcurrencyConfig:
        !If
          - LambdaProvisioned
          - ProvisionedConcurrentExecutions: 2
          - Ref: AWS::NoValue

  LabsBalancesPSTLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LabsBalancesPSTLambda}"
      RetentionInDays: !Ref LogRetentionInDays

  LabsBalancesPSTProductionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub "${LabsBalancesPSTLambda}:${LambdaAliasProduction}"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayApi}*/*/*"

  LabsDummyPUTLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.kc.cloud.labs.aws.lambda.greetings.LabsDummyPUT::handleRequest
      FunctionName: !Sub "${EnvironmentId}-LabsDummyPUTLambda"
      Layers:
        - !Ref LabsLayer
      Role: !GetAtt LabsRole.Arn
      AutoPublishAlias: !Ref LambdaAliasBeta
      Environment:
        Variables:
          PARAM1: VALUE
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        EventApi:
          Type: Api
          Properties:
            Path: /dummy/put
            Method: put
            RestApiId: !Ref ApiGatewayApi  

  LabsDummyPUTAliasProduction:
    Type: AWS::Lambda::Alias
    Properties:
      Description: "Lambda alias for production"
      FunctionName: !Ref LabsDummyPUTLambda
      FunctionVersion: !Select [ 7, !Split [ ":", !Ref LabsDummyPUTLambda.Version ] ]
      Name: !Ref LambdaAliasProduction
      ProvisionedConcurrencyConfig:
        !If
          - LambdaProvisioned
          - ProvisionedConcurrentExecutions: 2
          - Ref: AWS::NoValue

  LabsDummyPUTLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LabsDummyPUTLambda}"
      RetentionInDays: !Ref LogRetentionInDays

  LabsDummyPUTProductionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub "${LabsDummyPUTLambda}:${LambdaAliasProduction}"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayApi}*/*/*"

  LabsRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${EnvironmentId}-LabsRole"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: !Sub "${EnvironmentId}-LabsPolicy" 
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:AssignPrivateIpAddresses"
                  - "ec2:UnassignPrivateIpAddresses"
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                  - "xray:GetSamplingRules"
                  - "xray:GetSamplingTargets"
                  - "xray:GetSamplingStatisticSummaries"
                Resource: "*"

  LabsUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: !Sub "${EnvironmentId}-LabsUsagePlan"
      Description: "Usage plan for Labs API"
      ApiStages:
        - ApiId: !Ref ApiGatewayApi
          Stage: "v1"
        - ApiId: !Ref ApiGatewayApi
          Stage: "Stage"

  LabsApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Enabled: true
      Name: !Sub "${EnvironmentId}-LabsApiKey"

  LabsUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref LabsApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref LabsUsagePlan

Outputs:
  LabsBalancesGETByIdLambdaVersion:
    Description: "LabsBalancesGETByIdLambda version"
    Value: !Sub "${LabsBalancesGETByIdLambda.Version}"

  RoleArn:
    Description: "LabsRole Arn 1"
    Value: !GetAtt LabsRole.Arn
  
  RoleArn2:
    Description: "LabsRole Arn 2"
    Value: !Sub "${LabsRole.Arn}"